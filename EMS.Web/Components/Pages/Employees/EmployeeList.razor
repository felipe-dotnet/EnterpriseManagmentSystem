@page "/employees"
@inject IEmployeeApiClient EmployeeApiClient
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Empleados - EMS</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="display-6">👥 Gestión de Empleados</h1>
                <button class="btn btn-primary btn-lg" @onclick="NavigateToCreate">
                    <span class="bi bi-plus-circle"></span> Nuevo Empleado
                </button>
            </div>
        </div>
    </div>

    @* BÚSQUEDA *@
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text"><span class="bi bi-search"></span></span>
                <input type="text"
                       class="form-control"
                       placeholder="Buscar por nombre, email, departamento..."
                       @bind="searchTerm"
                       @bind:event="oninput"
                       @onkeyup="OnSearchKeyUp" />
                @if (!string.IsNullOrWhiteSpace(searchTerm))
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <span class="bi bi-x-circle"></span>
                    </button>
                }
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @onchange="OnPageSizeChanged">
                <option value="10" selected>10 por página</option>
                <option value="25">25 por página</option>
                <option value="50">50 por página</option>
                <option value="100">100 por página</option>
            </select>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-primary w-100" @onclick="LoadEmployees" disabled="@isLoading">
                <span class="bi bi-arrow-clockwise"></span> Actualizar
            </button>
        </div>
    </div>

    @* LOADING STATE *@
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Cargando empleados...</p>
        </div>
    }
    else if (employees == null || !employees.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            <span class="bi bi-info-circle" style="font-size: 2rem;"></span>
            <p class="mt-2 mb-0">
                @if (string.IsNullOrWhiteSpace(searchTerm))
                {
                    <text>No hay empleados registrados. ¡Crea el primero!</text>
                }
                else
                {
                    <text>No se encontraron empleados con el término: <strong>@searchTerm</strong></text>
                }
            </p>
        </div>
    }
    else
    {
        @* TABLA DE EMPLEADOS *@
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Nombre Completo</th>
                                <th>Email</th>
                                <th>Teléfono</th>
                                <th>Puesto</th>
                                <th>Departamento</th>
                                <th>Salario</th>
                                <th>Estado</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var employee in employees)
                            {
                                <tr>
                                    <td>@employee.Id</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-circle me-2">
                                                @employee.FirstName[0]@employee.LastName[0]
                                            </div>
                                            <strong>@employee.FullName</strong>
                                        </div>
                                    </td>
                                    <td>@employee.Email</td>
                                    <td>@(employee.Phone ?? "N/A")</td>
                                    <td>@employee.Position</td>
                                    <td>
                                        <span class="badge bg-info">@employee.Department</span>
                                    </td>
                                    <td>$@employee.Salary.ToString("N2")</td>
                                    <td>
                                        <span class="badge @(employee.Status == EMS.Domain.Enums.EmployeeStatus.Active ? "bg-success" : "bg-secondary")">
                                            @employee.StatusName
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick="() => NavigateToEdit(employee.Id)"
                                                    title="Editar">
                                                <span class="bi bi-pencil-fill"></span>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="() => ConfirmDelete(employee)"
                                                    title="Eliminar">
                                                <span class="bi bi-trash-fill"></span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        @* PAGINACIÓN *@
        @if (pagination != null && pagination.TotalPages > 1)
        {
            <nav aria-label="Paginación de empleados" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(!pagination.HasPrevious ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(!pagination.HasPrevious)">
                            Primera
                        </button>
                    </li>
                    <li class="page-item @(!pagination.HasPrevious ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pagination.Page - 1)" disabled="@(!pagination.HasPrevious)">
                            Anterior
                        </button>
                    </li>

                    @for (int i = Math.Max(1, pagination.Page - 2); i <= Math.Min(pagination.TotalPages, pagination.Page + 2); i++)
                    {
                        var pageNum = i;
                        <li class="page-item @(pageNum == pagination.Page ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNum)">
                                @pageNum
                            </button>
                        </li>
                    }

                    <li class="page-item @(!pagination.HasNext ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pagination.Page + 1)" disabled="@(!pagination.HasNext)">
                            Siguiente
                        </button>
                    </li>
                    <li class="page-item @(!pagination.HasNext ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pagination.TotalPages)" disabled="@(!pagination.HasNext)">
                            Última
                        </button>
                    </li>
                </ul>
                <p class="text-center text-muted">
                    Página @pagination.Page de @pagination.TotalPages | Total de empleados: @pagination.TotalItems
                </p>
            </nav>
        }
    }
</div>

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 0.9rem;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0,123,255,0.1);
        cursor: pointer;
    }
</style>

@code {
    private List<EmployeeDto>? employees;
    private PaginationMeta? pagination;
    private bool isLoading = false;
    private string? searchTerm;
    private int currentPage = 1;
    private int pageSize = 10;
    private System.Threading.Timer? searchDebounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        isLoading = true;
        try
        {
            var response = await EmployeeApiClient.GetEmployeesAsync(currentPage, pageSize, searchTerm);

            if (response != null && response.Success && response.Data != null)
            {
                employees = response.Data.Items;
                pagination = response.Data.Pagination;
                ToastService.ShowSuccess($"Se cargaron {employees.Count} empleados correctamente");
            }
            else
            {
                ToastService.ShowError(response?.Message ?? "Error al cargar empleados");
                employees = new List<EmployeeDto>();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
            employees = new List<EmployeeDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchDebounceTimer?.Dispose();
        searchDebounceTimer = new System.Threading.Timer(async _ =>
        {
            currentPage = 1;
            await InvokeAsync(async () =>
            {
                await LoadEmployees();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        currentPage = 1;
        await LoadEmployees();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || (pagination != null && page > pagination.TotalPages))
            return;

        currentPage = page;
        await LoadEmployees();
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            await LoadEmployees();
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/employees/create");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task ConfirmDelete(EmployeeDto employee)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Estás seguro de eliminar a {employee.FullName}?");

        if (confirmed)
        {
            await DeleteEmployee(employee.Id);
        }
    }

    private async Task DeleteEmployee(int id)
    {
        isLoading = true;
        try
        {
            var response = await EmployeeApiClient.DeleteEmployeeAsync(id);

            if (response != null && response.Success)
            {
                ToastService.ShowSuccess("Empleado eliminado correctamente");
                await LoadEmployees();
            }
            else
            {
                ToastService.ShowError(response?.Message ?? "Error al eliminar empleado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    [Inject] IJSRuntime JSRuntime { get; set; } = default!;
}